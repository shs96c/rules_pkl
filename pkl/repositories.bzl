#"""Declare runtime dependencies
#
#These are needed for local dev, and users must install them as well.
#See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
#"""
#
#load("@bazel_tools//tools/build_defs/repo:http.bzl", _http_archive = "http_archive")
#load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
#load("//pkl/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
#load("//pkl/private:versions.bzl", "TOOL_VERSIONS")
#
#def http_archive(name, **kwargs):
#    maybe(_http_archive, name = name, **kwargs)
#
## WARNING: any changes in this function may be BREAKING CHANGES for users
## because we'll fetch a dependency which may be different from one that
## they were previously fetching later in their WORKSPACE setup, and now
## ours took precedence. Such breakages are challenging for users, so any
## changes in this function should be marked as BREAKING in the commit message
## and released only in semver majors.
## This is all fixed by bzlmod, so we just tolerate it for now.
#def rules_pkl_dependencies():
#    # The minimal version of bazel_skylib we require
#    http_archive(
#        name = "bazel_skylib",
#        sha256 = "74d544d96f4a5bb630d465ca8bbcfe231e3594e5aae57e1edbf17a6eb3ca2506",
#        urls = [
#            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.3.0/bazel-skylib-1.3.0.tar.gz",
#            "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.3.0/bazel-skylib-1.3.0.tar.gz",
#        ],
#    )
#
#########
## Remaining content of the file is only used to support toolchains.
#########
#_DOC = "Fetch external tools needed for pkl toolchain"
#_ATTRS = {
#    "pkl_version": attr.string(mandatory = True, values = TOOL_VERSIONS.keys()),
#    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
#}
#
#def _pkl_repo_impl(repository_ctx):
#    url = "https://github.com/someorg/someproject/releases/download/v{0}/pkl-{1}.zip".format(
#        repository_ctx.attr.pkl_version,
#        repository_ctx.attr.platform,
#    )
#    repository_ctx.download_and_extract(
#        url = url,
#        integrity = TOOL_VERSIONS[repository_ctx.attr.pkl_version][repository_ctx.attr.platform],
#    )
#    build_content = """#Generated by pkl/repositories.bzl
#load("@org_pkl-lang_rules_pkl//pkl:toolchain.bzl", "pkl_toolchain")
#pkl_toolchain(name = "pkl_toolchain", target_tool = select({
#        "@bazel_tools//src/conditions:host_windows": "pkl_tool.exe",
#        "//conditions:default": "pkl_tool",
#    }),
#)
#"""
#
#    # Base BUILD file for this repository
#    repository_ctx.file("BUILD.bazel", build_content)
#
#pkl_repositories = repository_rule(
#    _pkl_repo_impl,
#    doc = _DOC,
#    attrs = _ATTRS,
#)
#
## Wrapper macro around everything above, this is the primary API
#def pkl_register_toolchains(name, register = True, **kwargs):
#    """Convenience macro for users which does typical setup.
#
#    - create a repository for each built-in platform like "pkl_linux_amd64" -
#      this repository is lazily fetched when node is needed for that platform.
#    - TODO: create a convenience repository for the host platform like "pkl_host"
#    - create a repository exposing toolchains for each platform like "pkl_platforms"
#    - register a toolchain pointing at each platform
#    Users can avoid this macro and do these steps themselves, if they want more control.
#    Args:
#        name: base name for all created repos, like "pkl1_14"
#        register: whether to call through to native.register_toolchains.
#            Should be True for WORKSPACE users, but false when used under bzlmod extension
#        **kwargs: passed to each node_repositories call
#    """
#    for platform in PLATFORMS.keys():
#        pkl_repositories(
#            name = name + "_" + platform,
#            platform = platform,
#            **kwargs
#        )
#        if register:
#            native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))
#
#    toolchains_repo(
#        name = name + "_toolchains",
#        user_repository_name = name,
#    )

load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")

def pkl_cli_binaries():
    maybe(
        http_file,
        name = "pkl-cli-macos",
        url = "https://artifacts.apple.com/artifactory/pcl-release-local/com/apple/pkl/pkl-cli-macos/0.24.6/pkl-cli-macos-0.24.6.bin",
        sha256 = "8f3a016b79796d63913afa9f56c3f91161bc3d6ae05ca7a63f8cc699b6c07654",
        executable = True,
    )

    maybe(
        http_file,
        name = "pkl-cli-linux-aarch64",
        url = "https://artifacts.apple.com/artifactory/pcl-release-local/com/apple/pkl/pkl-cli-linux-aarch64/0.24.6/pkl-cli-linux-aarch64-0.24.6.bin",
        sha256 = "7aae0eb3f9227ede086d34d687e720e1ce2df3b857d59bf2b69fb5896cb1c273",
        executable = True,
    )

    maybe(
        http_file,
        url = "https://artifacts.apple.com/artifactory/pcl-release-local/com/apple/pkl/pkl-cli-linux-amd64/0.24.6/pkl-cli-linux-amd64-0.24.6.bin",
        sha256 = "313465d132b838ca14c2090c5a26a643de899ef831c6155ef03407c450eeda8d",
        name = "pkl-cli-linux-x86_64",
        executable = True,
    )
